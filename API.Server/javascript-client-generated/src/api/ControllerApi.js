/*
 * HackPac - OpenAPI 3.0
 * Pacman api server
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.50
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Controller} from '../model/Controller';
import {DirectionUpdate} from '../model/DirectionUpdate';

/**
* Controller service.
* @module api/ControllerApi
* @version 1.0.11
*/
export class ControllerApi {

    /**
    * Constructs a new ControllerApi. 
    * @alias module:api/ControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the controllerControllerIdDirectionPost operation.
     * @callback moduleapi/ControllerApi~controllerControllerIdDirectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the direction
     * Get control
     * @param {Number} controllerId ID of the controller
     * @param {Object} opts Optional parameters
     * @param {module:model/DirectionUpdate} opts.body data to post
     * @param {module:api/ControllerApi~controllerControllerIdDirectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    controllerControllerIdDirectionPost(controllerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'controllerId' is set
      if (controllerId === undefined || controllerId === null) {
        throw new Error("Missing the required parameter 'controllerId' when calling controllerControllerIdDirectionPost");
      }

      let pathParams = {
        'controllerId': controllerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/controller/{controllerId}/direction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the controllerGet operation.
     * @callback moduleapi/ControllerApi~controllerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Controller{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get new controller
     * Get new controller
     * @param {module:api/ControllerApi~controllerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    controllerGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Controller;

      return this.apiClient.callApi(
        '/controller', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}